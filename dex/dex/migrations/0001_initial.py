# Generated by Django 4.1.5 on 2023-04-15 10:55

import dex.models
import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion
import sparks.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Order",
            fields=[
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                (
                    "deleted",
                    models.BooleanField(
                        default=False,
                        editable=False,
                        help_text="Whether the record is deleted or not (soft-delete)",
                    ),
                ),
                (
                    "pkid",
                    models.BigAutoField(
                        editable=False, primary_key=True, serialize=False
                    ),
                ),
                (
                    "id",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                (
                    "energy",
                    dex.models.EnergyField(
                        help_text="Net export energy in Wh.", verbose_name="Energy (Wh)"
                    ),
                ),
                (
                    "price",
                    sparks.models.SparksField(
                        help_text="Price of the energy in SPARKS",
                        verbose_name="Price (SPARKS)",
                    ),
                ),
                (
                    "status",
                    models.SmallIntegerField(
                        choices=[
                            (0, "ORDER_REQ_RECEIVED"),
                            (10, "VALIDATION_PENDING"),
                            (20, "VALIDATION_ACCEPTED"),
                            (25, "VALIDATION_REJECTED"),
                            (30, "OPEN"),
                            (40, "PROCESSING"),
                            (45, "REJECTED"),
                            (50, "COMPLETED"),
                        ],
                        default=0,
                        editable=False,
                        help_text="Status of the placed order",
                        verbose_name="Status",
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("DOMESTIC", "DOMESTIC"),
                            ("MUNICIPAL", "MUNICIPAL"),
                            ("COMMERCIAL", "COMMERCIAL"),
                            ("INDUSTRIAL", "INDUSTRIAL"),
                            ("AGRICULTURAL", "AGRICULTURAL"),
                            ("STORAGE", "STORAGE"),
                            ("SOLAR", "SOALR"),
                            ("WIND", "WIND"),
                            ("HYDRO", "HYDRO"),
                            ("GEOTHERMAL", "GEOTHERMAL"),
                            ("NUCLEAR", "NUCLEAR"),
                            ("BIOMASS", "BIOMASS"),
                        ],
                        help_text="Generation/Storage/Consumption category of the energy associated to the order",
                        max_length=255,
                        verbose_name="Category",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Prosumer",
            fields=[
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                (
                    "deleted",
                    models.BooleanField(
                        default=False,
                        editable=False,
                        help_text="Whether the record is deleted or not (soft-delete)",
                    ),
                ),
                (
                    "pkid",
                    models.BigAutoField(
                        editable=False, primary_key=True, serialize=False
                    ),
                ),
                (
                    "id",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="An identifiable name of the prosumer",
                        max_length=255,
                        verbose_name="Name",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="A short brief about the prosumer",
                        max_length=255,
                        verbose_name="Description",
                    ),
                ),
                (
                    "location",
                    django.contrib.gis.db.models.fields.PointField(
                        geography=True,
                        help_text="Location of the prosumer",
                        srid=4326,
                        verbose_name="Location",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Trade",
            fields=[
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                (
                    "deleted",
                    models.BooleanField(
                        default=False,
                        editable=False,
                        help_text="Whether the record is deleted or not (soft-delete)",
                    ),
                ),
                (
                    "pkid",
                    models.BigAutoField(
                        editable=False, primary_key=True, serialize=False
                    ),
                ),
                (
                    "id",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                (
                    "price",
                    sparks.models.SparksField(
                        editable=False,
                        help_text="The average price of this trade in SPARKS",
                        verbose_name="Avg. Price (SPARKS)",
                    ),
                ),
                (
                    "transmission_losses",
                    dex.models.EnergyField(
                        editable=False,
                        help_text="Estimated energy lost in transmission",
                        verbose_name="Transmission Losses",
                    ),
                ),
                (
                    "energy",
                    dex.models.EnergyField(
                        editable=False,
                        help_text="Total amount of energy traded in this trade (inclusive of transmission losses).",
                        verbose_name="Total Energy",
                    ),
                ),
                (
                    "settlement_status",
                    models.SmallIntegerField(
                        choices=[
                            (0, "PAYMENT_PENDING"),
                            (50, "PAYMENT_PROCESSING"),
                            (100, "PAYMENT_PROCESSED"),
                        ],
                        default=0,
                        editable=False,
                        help_text="Status of the settlement of the order",
                        verbose_name="Settlement Status",
                    ),
                ),
                (
                    "order",
                    models.ForeignKey(
                        editable=False,
                        help_text="Order that was traded",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="trades",
                        to="dex.order",
                        verbose_name="Order",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
    ]
